# Cross toolchain variables
# If these are not in your path, you can make them absolute.
XT_PRG_PREFIX = arm-none-eabi-
CC = $(XT_PRG_PREFIX)gcc
LD = $(XT_PRG_PREFIX)ld

# uARM-related paths
UARM_DIR = ./uarm
INCLUDE_DIR = ./include 
SRC_DIR = ./src
BUILD_DIR = ./out/uarm

SRCS = $(wildcard *.c)
OBJS = $(addprefix $(BUILD_DIR)/,$(SRCS:.c=.o)) 

# Compiler options
CFLAGS_LANG = 
CFLAGS_UARM = -mcpu=arm7tdmi -DTARGET_UARM=1
CFLAGS = $(CFLAGS_LANG) $(CFLAGS_UARM) -I$(UARM_DIR) -I$(UARM_DIR)/uarm -I$(INCLUDE_DIR) -DUARM=1 -Wall -O0

# Linker options
LDFLAGS = -G 0 -nostdlib -T $(UARM_DIR)/elf32ltsarm.h.uarmcore.x

# Add the location of crt*.S to the search path
VPATH = $(UARM_DIR)
TARGET = $(BUILD_DIR)/kernel

.PHONY : all clean

all : kernel.core.uarm

kernel.core.uarm : $(TARGET)
	elf2uarm -k $<

$(TARGET) : $(OBJS) 
	$(LD) -o $@ $^ $(LDFLAGS)

clean:
	-rm -f *.o kernel kernel.*.uarm
	-rm -rf $(BUILD_DIR)

$(BUILD_DIR)/%.o: %.c
	mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -c -o $@ $<

# Pattern rule for assembly modules
$(BUILD_DIR)/%.o: %.s
	$(CC) $(CFLAGS) -c -o $@ $<

